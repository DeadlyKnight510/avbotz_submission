The differences between Pipes and Shared Memory!

    If the programs all talk to each other without a central form of communication, I would choose Shared Memory. 
But in our case, it would be more beneficial if we spent our time working on other pieces of code. 

    Shared Memory is better when many programs need to send information to each other (like in this case). 
With shared memory, 2 or more programs share memory and communicate using that memory. This saves 
resources as one central area is used instead of many files. However, I don’t think that is a big issue 
yet. Though it is more useful in our situation, it is harder to debug. This is important because there
will definitely be some error when we are getting it to work. Like before, it may be better to work 
on other pieces of code. Also, shared memory is easier to work asynchronously and check for new data
only once in a while. This isn’t good in our case, because we need to check for updates frequently. 
Lastly, it is more work.

    Pipes are easier to work with, as it is a direct form of communication between two programs.
Synchronization is simple and built into the pipe software. This allows for easier setup. The
downside is that pipes can only connect 2 programs. 
